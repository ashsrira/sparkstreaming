/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.producer;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class twitterRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1355968308045776682L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"twitterRecord\",\"namespace\":\"com.kafka.producer\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tweet\",\"type\":\"string\"},{\"name\":\"location\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<twitterRecord> ENCODER =
      new BinaryMessageEncoder<twitterRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<twitterRecord> DECODER =
      new BinaryMessageDecoder<twitterRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<twitterRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<twitterRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<twitterRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this twitterRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a twitterRecord from a ByteBuffer. */
  public static twitterRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence tweet;
  @Deprecated public java.lang.CharSequence location;
  @Deprecated public long id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public twitterRecord() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param tweet The new value for tweet
   * @param location The new value for location
   * @param id The new value for id
   */
  public twitterRecord(java.lang.CharSequence name, java.lang.CharSequence tweet, java.lang.CharSequence location, java.lang.Long id) {
    this.name = name;
    this.tweet = tweet;
    this.location = location;
    this.id = id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return tweet;
    case 2: return location;
    case 3: return id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: tweet = (java.lang.CharSequence)value$; break;
    case 2: location = (java.lang.CharSequence)value$; break;
    case 3: id = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'tweet' field.
   * @return The value of the 'tweet' field.
   */
  public java.lang.CharSequence getTweet() {
    return tweet;
  }

  /**
   * Sets the value of the 'tweet' field.
   * @param value the value to set.
   */
  public void setTweet(java.lang.CharSequence value) {
    this.tweet = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Creates a new twitterRecord RecordBuilder.
   * @return A new twitterRecord RecordBuilder
   */
  public static com.kafka.producer.twitterRecord.Builder newBuilder() {
    return new com.kafka.producer.twitterRecord.Builder();
  }

  /**
   * Creates a new twitterRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new twitterRecord RecordBuilder
   */
  public static com.kafka.producer.twitterRecord.Builder newBuilder(com.kafka.producer.twitterRecord.Builder other) {
    return new com.kafka.producer.twitterRecord.Builder(other);
  }

  /**
   * Creates a new twitterRecord RecordBuilder by copying an existing twitterRecord instance.
   * @param other The existing instance to copy.
   * @return A new twitterRecord RecordBuilder
   */
  public static com.kafka.producer.twitterRecord.Builder newBuilder(com.kafka.producer.twitterRecord other) {
    return new com.kafka.producer.twitterRecord.Builder(other);
  }

  /**
   * RecordBuilder for twitterRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<twitterRecord>
    implements org.apache.avro.data.RecordBuilder<twitterRecord> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence tweet;
    private java.lang.CharSequence location;
    private long id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.producer.twitterRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tweet)) {
        this.tweet = data().deepCopy(fields()[1].schema(), other.tweet);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing twitterRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.producer.twitterRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tweet)) {
        this.tweet = data().deepCopy(fields()[1].schema(), other.tweet);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweet' field.
      * @return The value.
      */
    public java.lang.CharSequence getTweet() {
      return tweet;
    }

    /**
      * Sets the value of the 'tweet' field.
      * @param value The value of 'tweet'.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder setTweet(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tweet = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet' field has been set.
      * @return True if the 'tweet' field has been set, false otherwise.
      */
    public boolean hasTweet() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tweet' field.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder clearTweet() {
      tweet = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder clearLocation() {
      location = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder setId(long value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.kafka.producer.twitterRecord.Builder clearId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public twitterRecord build() {
      try {
        twitterRecord record = new twitterRecord();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tweet = fieldSetFlags()[1] ? this.tweet : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.location = fieldSetFlags()[2] ? this.location : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<twitterRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<twitterRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<twitterRecord>
    READER$ = (org.apache.avro.io.DatumReader<twitterRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
